>>implementation of Linear Queue:

package test1;

import java.util.Scanner;

public class LinearQueue 
{
	  int front,rear,MaxSize,queue[];
	   void createQueue(int size)
	   {
	       MaxSize=size;
	       queue=new int[MaxSize];
	       front=0;
	       rear=-1;
	   }
	   void enqueue(int e)
	   {
	       rear++;
	       queue[rear]=e;
	   }
	   boolean is_full()
	   {
	       if(rear==MaxSize-1)
	           return true;
	       else
	           return false;
	   }
	   int dequeue()
	   {
	      int temp=queue[front];
	      front++;
	      return(temp);
	   }
	   boolean is_empty()
	   {
	       if(front>rear)
	           return true;
	       else
	           return false;
	   }
	    void print_queue()
	     {
	         for(int i=front;i<=rear;i++)
	             System.out.println(queue[i]);
	     }
	    public static void main(String args[])
	     {
	         Scanner in=new Scanner(System.in);
	         System.out.println("Give the size of queue:");
	         int size=in.nextInt();
	         LinearQueue obj=new LinearQueue();
	         obj.createQueue(size);
	         int ch;
	         do
	         {
	           System.out.println("\n1.Enqueue\n2.Dequeue\n3.Print\n0.Exit\n:");
	           ch=in.nextInt();
	           switch(ch)
	           {
	               case 1:
	                   if(!obj.is_full())
	                   {
	                       System.out.println("\nEnter an element:");
	                       int no=in.nextInt();
	                       obj.enqueue(no);
	                       System.out.println("Enqueued "+no);
	                   }
	                   else
	                       System.out.println("you can't add now bcz queue is full");
	                   break;
	               case 2:
	                    if(!obj.is_empty())
	                   {
	                       System.out.println("Dequeued "+obj.dequeue());
	                   }
	                   else
	                       System.out.println("Queue is Empty ,you can add now");
	                   break;
	               case 3:
	                    if(!obj.is_empty())
	                     {
	                       System.out.println(" Queue are as follows");
	                       obj.print_queue();
	                     }
	                    else
	                       System.out.println("Queue is Empty");
	                   break;
	               case 0:
	                       System.out.println("Exit");
	                   break;
	               default:
	                       System.out.println("Wrong Choice");
	                   break;
	           }
	             
	         }while(ch!=0);
	     }
	   
	   
	   
	   
	    
	}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


>> Quicksort:package test2;

public class QuickSort {
	void QuickSort(int a[],int start,int end)
    {
        int i=start,j=end,pivot=end;
        if(i<=j)
        {
            while(i<j)
            {
                while(a[i]<a[pivot])
                    i++;
                while(a[j]>a[pivot])
                    j--;
                if(i<j)
                {
                    int temp=a[i];a[i]=a[j];a[j]=temp;}
                }
            }
        if(i<end)
            QuickSort(a,i+1,end);
        if(j>start)
            QuickSort(a,start,j-1);
    }
}
